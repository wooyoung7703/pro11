services:
  db:
    image: postgres:15
    container_name: xrp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydata}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-traderpass}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-mydata}"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "${DB_PORT:-55432}:5432"

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: xrp-app:latest
    container_name: xrp-app
    env_file:
      - .env
      - .env.private
    environment:
      # DB 연결 기본값은 내부 db 서비스를 바라보며 DOCKER_POSTGRES_HOST 로 오버라이드 가능.
      #  - 외부 DB(RDS 등)에 붙으려면 DOCKER_POSTGRES_HOST=host.docker.internal 등의 값을 추가하고
      #    POSTGRES_* 자격 증명을 해당 환경에 맞게 조정하세요.
      APP_ENV: ${APP_ENV:-docker}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      AUTO_RETRAIN_ENABLED: ${AUTO_RETRAIN_ENABLED:-false}
      AUTO_PROMOTE_ENABLED: ${AUTO_PROMOTE_ENABLED:-false}
      CALIBRATION_MONITOR_ENABLED: ${CALIBRATION_MONITOR_ENABLED:-false}
      INGESTION_ENABLED: ${INGESTION_ENABLED:-false}
      SKIP_DB: ${SKIP_DB:-false}
      POSTGRES_HOST: "${DOCKER_POSTGRES_HOST:-db}"
    ports:
      - "${APP_PORT:-8000}:8000"
    # Compose logs helpful for debugging pool issues
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: xrp-frontend:latest
    container_name: xrp-frontend
    depends_on:
      - app
    environment:
      BACKEND_ORIGIN: http://app:8000
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    restart: unless-stopped

volumes:
  pgdata:
