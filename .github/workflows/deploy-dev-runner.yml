name: deploy-dev-runner

on:
  workflow_run:
    workflows: ["docker-build"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop') }}
    # Run on macOS/Linux self-hosted runner labeled 'pro11-deploy'
    runs-on:
      - self-hosted
      - pro11-deploy
    concurrency:
      group: deploy-dev-runner
      cancel-in-progress: false
    env:
      COMPOSE_FILE: docker-compose.dev.deploy.yml
      COMPOSE_PROJECT_NAME: ${{ github.repository_owner }}
      GH_OWNER: ${{ github.repository_owner }}
      FRONTEND_TAG: dev-${{ github.event.workflow_run.head_sha || github.sha }}
      BACKEND_TAG: dev-${{ github.event.workflow_run.head_sha || github.sha }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostics (env and Docker)
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "GH_OWNER=$GH_OWNER"
          echo "COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME"
          echo "COMPOSE_FILE=$COMPOSE_FILE"
          docker --version || true
          docker info || true
          echo "Listing workspace files:"
          ls -la

      - name: Deploy on POSIX runner (bash)
        shell: bash
        env:
          DEV_ENV_B64: ${{ secrets.DEV_ENV_B64 }}
          DEV_ENV_PRIVATE_B64: ${{ secrets.DEV_ENV_PRIVATE_B64 }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"
          # Optional: write .env files from base64 secrets
          if [ -n "${DEV_ENV_B64:-}" ]; then \
            printf '%s' "$DEV_ENV_B64" | base64 -d > .env 2>/dev/null || \
            printf '%s' "$DEV_ENV_B64" | base64 -D > .env 2>/dev/null || \
            printf '%s' "$DEV_ENV_B64" | openssl base64 -d -A -out .env 2>/dev/null || true; \
          fi
          if [ -n "${DEV_ENV_PRIVATE_B64:-}" ]; then \
            printf '%s' "$DEV_ENV_PRIVATE_B64" | base64 -d > .env.private 2>/dev/null || \
            printf '%s' "$DEV_ENV_PRIVATE_B64" | base64 -D > .env.private 2>/dev/null || \
            printf '%s' "$DEV_ENV_PRIVATE_B64" | openssl base64 -d -A -out .env.private 2>/dev/null || true; \
          fi
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
          # Always pull latest moving tags, then force recreate
          docker compose -f "$COMPOSE_FILE" pull --ignore-pull-failures || true
          docker compose -f "$COMPOSE_FILE" up -d --force-recreate
          # Diagnostics
          echo "FRONTEND_TAG=$FRONTEND_TAG"
          echo "BACKEND_TAG=$BACKEND_TAG"
          docker compose -f "$COMPOSE_FILE" images || true
          docker inspect -f '{{.Config.Image}} | {{.Image}}' pro11-frontend-dev || echo 'inspect frontend failed'
          docker inspect -f '{{.Config.Image}} | {{.Image}}' pro11-app-dev || echo 'inspect app failed'
          # Wait up to ~60s for DB to be healthy
          for i in $(seq 1 60); do
            if docker compose -f "$COMPOSE_FILE" ps | grep -i 'db' | grep -qi 'healthy'; then break; fi
            sleep 1
          done
          # Run DB migrations inside the app container (best-effort)
          docker compose -f "$COMPOSE_FILE" exec -T app poetry run alembic -c alembic.ini upgrade head || echo 'Migration step skipped/failed'
          # Show service status and basic frontend files
          docker compose -f "$COMPOSE_FILE" ps || true
          docker compose -f "$COMPOSE_FILE" exec -T frontend sh -lc "ls -la /usr/share/nginx/html || true"
          docker compose -f "$COMPOSE_FILE" exec -T frontend sh -lc "grep -n 'build-meta.js' /usr/share/nginx/html/index.html || true"
          docker compose -f "$COMPOSE_FILE" exec -T frontend sh -lc "[ -f /usr/share/nginx/html/build-meta.js ] && head -n 1 /usr/share/nginx/html/build-meta.js || echo no-build-meta"
          docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200 frontend || true
          docker system prune -f || true
