name: deploy-dev-runner

on:
  workflow_run:
    workflows: ["docker-build"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop') }}
    # IMPORTANT: Ensure your remote self-hosted runner has label: 'dev' (Windows runner recommended).
    runs-on:
      - self-hosted
      - dev
    concurrency:
      group: deploy-dev-runner
      cancel-in-progress: false
    env:
      COMPOSE_FILE: docker-compose.dev.deploy.yml
      COMPOSE_PROJECT_NAME: ${{ github.repository_owner }}
      GH_OWNER: ${{ github.repository_owner }}
      FRONTEND_TAG: dev-${{ github.event.workflow_run.head_sha || github.sha }}
      BACKEND_TAG: dev-${{ github.event.workflow_run.head_sha || github.sha }}
    defaults:
      run:
        shell: cmd
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostics (env and Docker)
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%
          echo GITHUB_WORKSPACE=%GITHUB_WORKSPACE%
          echo GH_OWNER=%GH_OWNER%
          echo COMPOSE_PROJECT_NAME=%COMPOSE_PROJECT_NAME%
          echo COMPOSE_FILE=%COMPOSE_FILE%
          docker --version
          docker info
          echo Listing workspace files:
          dir /b

      - name: Deploy on Windows runner (cmd + certutil only)
        shell: cmd
        env:
          DEV_ENV_B64: ${{ secrets.DEV_ENV_B64 }}
          DEV_ENV_PRIVATE_B64: ${{ secrets.DEV_ENV_PRIVATE_B64 }}
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd %GITHUB_WORKSPACE%
          if not "%DEV_ENV_B64%"=="" (
            > .env.b64 echo %DEV_ENV_B64%
            certutil -f -decode .env.b64 .env >NUL 2>&1
            del /f /q .env.b64
          )
          if not "%DEV_ENV_PRIVATE_B64%"=="" (
            > .env.private.b64 echo %DEV_ENV_PRIVATE_B64%
            certutil -f -decode .env.private.b64 .env.private >NUL 2>&1
            del /f /q .env.private.b64
          )
          echo %GHCR_TOKEN% | docker login ghcr.io -u %GHCR_USER% --password-stdin
          rem Always pull latest images for moving tags
          docker compose -f %COMPOSE_FILE% pull --ignore-pull-failures
          rem Force recreate to avoid stale containers using cached layers
          docker compose -f %COMPOSE_FILE% up -d --force-recreate
          rem Wait briefly for DB to be healthy (up to ~60s)
          for /l %%i in (1,1,60) do (
            docker compose -f %COMPOSE_FILE% ps | findstr /i "db" | findstr /i "healthy" && goto :db_ok
            ping -n 2 127.0.0.1 >NUL
          )
          :db_ok
          rem Run DB migrations inside the app container (best-effort)
          docker compose -f %COMPOSE_FILE% exec -T app poetry run alembic -c alembic.ini upgrade head || echo Migration step skipped/failed
          rem Show service status and basic frontend files to help debug 404s
          docker compose -f %COMPOSE_FILE% ps
          docker compose -f %COMPOSE_FILE% exec -T frontend sh -lc "ls -la /usr/share/nginx/html || true"
          docker compose -f %COMPOSE_FILE% logs --no-color --tail=200 frontend || true
          docker system prune -f
