#############################################
# Application Base Config (애플리케이션 기본 설정)
#############################################
# 실행 환경: local | dev | prod 등. 로깅/보안/기능 플래그 기본값에 영향.
APP_ENV=local
# 로그 레벨: DEBUG | INFO | WARNING | ERROR | CRITICAL. 개발은 DEBUG, 운영은 INFO 이상 권장.
LOG_LEVEL=DEBUG
# API 키 (로컬은 비워 두세요). 운영에서는 비밀 저장소에 보관하고 필요 시 로테이션하세요.
# 빈 값이면 부팅 시 임시 키가 자동 생성됩니다.
API_KEY=
# true면 API_KEY가 플레이스홀더이거나 비어 있을 때 부팅 시 임시 키를 자동 생성.
API_KEY_AUTO_GENERATE=true  # If true and API_KEY is placeholder/empty, app will auto-generate a runtime key

# 대시보드용 웹소켓 캔들 수집 활성화 (코드 기본값은 false였음)
INGESTION_ENABLED=true

# 데이터베이스 기본 설정 (POSTGRES_* 권장; 레거시 DB_*도 폴백으로 허용)
# Windows/Docker Desktop에서 host.docker.internal은 호스트 접근용 특수 호스트명.
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=traderpass
POSTGRES_DB=mydata

# 앱 부팅 시 필요한 최소 스키마(테이블) 자동 생성 보장
AUTO_SCHEMA_ENSURE=true

# Feature Flags (기능 플래그)
AUTO_RETRAIN_ENABLED=true
AUTO_PROMOTE_ENABLED=true
CALIBRATION_MONITOR_ENABLED=true

# true면 DB 의존 백그라운드 작업을 건너뜀 (일부 API는 500 발생 가능)
SKIP_DB=false   # If true, skips DB-dependent background tasks (endpoints needing DB may 500)

# Auto Promotion 임계치 (예시 값)
# 새 모델이 기준 대비 상대 AUC 향상 최소 비율
PROMOTION_MIN_RELATIVE_AUC_IMPROVEMENT=0.05
# 샘플(예측/검증 로그) 최소 증가량
PROMOTION_MIN_SAMPLE_GROWTH=200
# 최소 평가 간격(분)
PROMOTION_MIN_INTERVAL_MINUTES=30

# Calibration / Retrain 튜닝 (예시 값)
# 보정 드리프트 절대 임계치 (예: 0.05 => 5%p)
CALIBRATION_DRIFT_ABS_THRESHOLD=0.05
# 보정 드리프트 상대 임계치 (예: 0.5 => 50%) — 평가 안정화(오탐 감소)를 위해 상향
CALIBRATION_DRIFT_REL_THRESHOLD=0.5
# 드리프트 연속 발생 허용 횟수 — 재학습 직후 소음 억제 및 안정화 목적
CALIBRATION_STREAK_THRESHOLD=10
# 캘리브레이션 모니터 평가 윈도우/최소 샘플 — 짧은 창/적은 샘플로 인한 변동성 완화
# 애플리케이션이 지원할 경우 적용되며, 미지원 시 기본값으로 폴백됩니다.
CALIBRATION_MONITOR_WINDOW_SECONDS=10800   # 3시간 권장
CALIBRATION_MONITOR_MIN_SAMPLES=1000       # 최소 1000샘플 이상일 때만 추천 판단
# 재학습 최소 쿨다운(분)
# - 개발/튜닝: 5~30분(빠른 실험)
# - 운영 권장: 120~240분(성능 안정성)
RETRAIN_MIN_COOLDOWN_MINUTES=180

# Calibration 기반 자동 재학습 트리거 활성화 및 쿨다운(초)
# 코드에서는 CALIBRATION_RETRAIN_* 변수를 사용합니다.
CALIBRATION_RETRAIN_ENABLED=true
CALIBRATION_RETRAIN_MIN_INTERVAL=10800   # 180분 = 10800초

# 자동 재학습을 트리거하기 위한 최소 검증 샘플 수
# - 작게 설정(예: 2천~8천): 빠르게 반응하지만 과적합/잡음에 민감할 수 있음 (개발/튜닝 단계 권장)
# - 크게 설정(예: 1만~3만+): 신뢰도↑, 반응 속도↓ (운영 권장). 1m 인터벌/15s 추론 주기라면 1.5만~2만이 안정적.
# - 권장 운영 기본: 15000 (초기 안정 운용 후 트래픽/분포 특성에 맞춰 2만까지 점진 상향 고려)
AUTO_RETRAIN_MIN_SAMPLES=15000

# 학습 시 검증 데이터 비율 (예: 0.2 => 학습 80% / 검증 20%)
TRAINING_VALIDATION_FRACTION=0.3

#
#############################################
# Testing (테스트 모드)
#############################################
# true면 테스트 전용 코드 경로/시드/더미 데이터를 사용할 수 있음
TEST_MODE=false
# 자동 라벨러: 라이브 캘리브레이션(ECE) 계산을 위해 실현 라벨을 주기적으로 채웁니다
AUTO_LABELER_ENABLED=true
# 자동 라벨러 설정 (단위: 초)
# - AUTO_LABELER_INTERVAL: 스캔 주기. 너무 짧으면 DB/CPU 부하↑
# - AUTO_LABELER_MIN_AGE_SECONDS: 라벨링 대상 최소 경과 시간(추론 이후). 너무 짧으면 미실현/미종가 데이터로 오라클 오류 가능
# - AUTO_LABELER_BATCH_LIMIT: 1회 스캔당 최대 처리 행 수
AUTO_LABELER_INTERVAL=15
AUTO_LABELER_MIN_AGE_SECONDS=120
AUTO_LABELER_BATCH_LIMIT=1000
# Inference Playground - Direction forecast 설정
# - 표시 여부: PLAYGROUND_DIRECTION_CARD
# - 지평선: 콤마로 구분 (예: 1m,5m,15m)
# - 임계치: 0.45 => up_prob >= 0.55 이면 Up, up_prob <= 0.45 이면 Down, 그 사이면 Neutral
PLAYGROUND_DIRECTION_CARD=true
PLAYGROUND_DIRECTION_HORIZONS=1m,5m,15m
PLAYGROUND_DIRECTION_THRESH=0.45
# (중복된 APP_ENV와 두 번째 POSTGRES_* 블록 제거됨)
# 아래에 트레이딩/런타임 관련 추가 오버라이드를 정의하세요.
SYMBOL=XRPUSDT
INTERVAL=1m          # 캔들 인터벌 (예: 1m, 5m, 1h)
FEATURE_SCHED_INTERVAL=60  # 피처 생성 주기(초). 인터벌과 조화롭게 설정.

INFERENCE_AUTO_LOOP_ENABLED=true  # 자동 추론 루프 활성화
INFERENCE_AUTO_LOOP_INTERVAL=15   # 자동 추론 주기(초). 너무 짧으면 부하↑.

# OHLCV 부분 캔들 정책
OHLCV_INCLUDE_OPEN_DEFAULT=false         # 기본 API 응답에 시가(open) 포함 여부
OHLCV_WS_SNAPSHOT_INCLUDE_OPEN=true      # 웹소켓 스냅샷 수집 시 시가 포함 여부

# OHLCV recent fetch cap (controls training preview/history depth)
OHLCV_FETCH_RECENT_CAP=20000

KLINE_CONSUMER_BATCH_SIZE=1  # 캔들 소비/적재 배치 크기. 크면 효율↑, 지연/메모리↑.

ALLOW_ADMIN_NOAUTH=1  # 데모/로컬 편의를 위한 무인증 관리자 허용 (운영에서는 0 권장)

# Inference/Training target selection
# bottom 타겟 활성화: 학습/추론/자동 프로모션이 bottom_predictor 계열을 사용하도록 스위치
TRAINING_TARGET_TYPE=bottom
# 자동 프로모션 후보 모델 이름: baseline_predictor | bottom_predictor | ohlcv_sentiment_predictor
AUTO_PROMOTE_MODEL_NAME=bottom_predictor

# bottom 라벨 파라미터 (훈련/추론 모두에 사용). 필요 시 조정.
# lookahead: 향후 N개 캔들에서 이벤트 확인, drawdown: 기준 대비 하락 비율, rebound: 저점 대비 반등 비율
BOTTOM_LOOKAHEAD=60
BOTTOM_DRAWDOWN=0.015
BOTTOM_REBOUND=0.008
# bottom 모델 학습에 필요한 최소 라벨 수 (기본값: 150)
BOTTOM_MIN_LABELS=20
# bottom 라벨 계산 시 사용할 최대 캔들 수 (기본 5000 → 20000 으로 확대)
BOTTOM_OHLCV_FETCH_CAP=20000

# Trading fee configuration
# 수수료 모드: taker | maker (기본 taker)
TRADING_FEE_MODE=taker
# Taker/Maker 수수료율 (소수, 0.001 = 0.1%)
TRADING_FEE_TAKER=0.001
TRADING_FEE_MAKER=0.001

# Live Trading defaults
# 서버 부팅시 Live Trading 기본 base size (UI에서 저장하면 런타임으로 덮어씌워짐)
LIVE_TRADE_BASE_SIZE=10

# Risk engine starting equity baseline
# 부팅시 기본 시작 자본 (리스크/드로우다운 계산 기준)
RISK_STARTING_EQUITY=1000

# Exchange (Binance) API Keys — 실거래/주문/계정 정보 호출에 필요
# 아래 값을 본인 키로 설정하세요. 운영에서는 비밀 저장소를 사용하고 코드 저장소에 커밋하지 마세요.
# EXCHANGE=binance | mock
EXCHANGE=binance
# 실거래 주문 전송 활성화 스위치 (명시적으로 켜기 전까지는 시뮬레이션 경로 사용)
# 안전 기본값: 로컬에서는 항상 false 유지, 테스트넷 사용 권장
EXCHANGE_TRADING_ENABLED=true
# Binance 계정 키 (예: 선물 계정 API 키/시크릿)
# 주의: 실제 키를 여기에 두지 마세요. 비밀 저장소 또는 OS 비밀/CI 시크릿을 사용하세요.
# 로컬에서는 `.env.private`에만 넣고 .gitignore에 포함하세요. 본 파일은 항상 빈 값 유지!
BINANCE_API_KEY=
BINANCE_API_SECRET=

# 테스트넷 사용 여부 (true면 testnet URL로 라우팅하도록 어댑터가 구현된 경우)
BINANCE_TESTNET=false
# 실거래 강제 허용(안전장치 우회) — 절대 기본값으로 켜지 마세요.
# SAFETY_ALLOW_REAL_TRADING=0
# 계정 타입: futures | spot (현재 파이프라인은 선물 기준)
BINANCE_ACCOUNT_TYPE=spot

#############################################
# Low-buy Autopilot Tuning (저가 매수 전략 튜닝)
#############################################
# 보수적인 기본 파라미터: 지나치게 잦은 진입을 줄이기 위해 가격 괴리·드롭 폭을 상향 조정.
LOW_BUY_LOOKBACK=40
LOW_BUY_DISTANCE_PCT=0.02
LOW_BUY_MIN_DROP_PCT=0.03
# 거래량 필터: 최근 평균 대비 최소 2.2배 이상일 때만 허용.
LOW_BUY_VOLUME_RATIO=2.2
# RSI 상한: 과매수 구간(>35)에서는 저가 신호 무시.
LOW_BUY_RSI_MAX=35
# 모멘텀 필터: 직전 종가 대비 상승 중이면 제외(<=0.0만 허용).
LOW_BUY_MAX_MOMENTUM=0.0
# 필터 완화는 비활성화해 중복 신호를 줄임.
LOW_BUY_RELAX_IF_FILTERED=0
LOW_BUY_RELAX_DISTANCE_MULT=1.6
LOW_BUY_RELAX_DROP_MULT=0.6
LOW_BUY_RELAX_RSI_DELTA=8
LOW_BUY_RELAX_MOMENTUM_DELTA=0.0015
# 자동 실행·청산 루프 활성화 및 take-profit/stop-loss 설정.
LOW_BUY_AUTO_LOOP_ENABLED=true
LOW_BUY_AUTO_EXECUTE_ENABLED=true
LOW_BUY_AUTO_EXECUTE_PAPER=true
LOW_BUY_EXIT_LOOP_ENABLED=true
LOW_BUY_EXIT_LOOP_INTERVAL=10
LOW_BUY_TAKE_PROFIT_PCT=0.001
LOW_BUY_STOP_LOSS_PCT=0.005

#############################################
# Trading Lifecycle Policy (트레이딩 라이프사이클 정책)
#############################################
# Exit(종료) 트리거 이후 추가매수 동결 여부 (true면 종료 국면에서는 reduce-only 제안만 허용)
SCALEIN_FREEZE_ON_EXIT=true
# 추가매수 최대 횟수(포지션당). 0이면 추가매수 금지.
MAX_SCALEINS=20
# 두 추가매수 사이 최소 가격 간격(BPS, 1bps=0.01%). 예: 25 => 0.25%
MIN_ADD_DISTANCE_BPS=25
# Exit를 여러 조각으로 나눠서 체결할 때 조각 간 최소 간격(초). 0이면 비활성.
EXIT_SLICE_SECONDS=10

# Scale-in 기본값 (전문 트레이더 선호값)
# - ALLOW_SCALE_IN: 기본적으로 켭니다. 조건을 만족하면 필요한 만큼 분할 추가매수를 허용.
# - SCALE_IN_SIZE_RATIO: 베이스 대비 추가매수 크기 비율 (예: 0.5 => 베이스의 절반)
# - SCALE_IN_COOLDOWN_SEC: 추가매수 간 최소 간격(초) — 과도한 연속 진입 방지
# - SCALE_IN 추천 파라미터는 UI 추천 기능으로도 갱신 가능
ALLOW_SCALE_IN=true
SCALE_IN_SIZE_RATIO=1.0
SCALE_IN_COOLDOWN_SEC=30

# Scale-in gating enhancements
# 확률 델타(확률-임계치) 최소값: 예) 0.02 => 2%p 이상일 때만 추가매수 허용
SI_PROB_DELTA_MIN=0.02
# 게이트 결합 모드: and | or (and=조건+권고 모두 통과해야 실행)
SCALE_IN_GATE_MODE=and

# Require net-profit-only exits (fees included)
# true => Live Trading will only exit a position when realized PnL after fees is positive
EXIT_REQUIRE_NET_PROFIT=true

#############################################
# Docker Compose 포트 설정
#############################################
# 프론트엔드 포트 (기본값: 8081)
FRONTEND_PORT=8080
# 로컬 개발용 프론트엔드 포트 (Vite dev server)
FRONTEND_DEV_PORT=5173
# 백엔드 API 포트 (기본값: 8000)
APP_PORT=8000
# 데이터베이스 외부 포트 (기본값: 55432)
DB_PORT=55432

